/* tslint:disable */
/* eslint-disable */
/**
 * AquaTrail_Data
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MarinaModel,
  MooringModel,
  ServiceModel,
} from '../models/index';
import {
    MarinaModelFromJSON,
    MarinaModelToJSON,
    MooringModelFromJSON,
    MooringModelToJSON,
    ServiceModelFromJSON,
    ServiceModelToJSON,
} from '../models/index';

export interface DataGeoJsonIdGetRequest {
    geoJsonId: number;
}

export interface DataMarinasGetRequest {
    coordinates?: string;
    distance?: number;
    limit?: number;
    offset?: number;
}

export interface DataMarinasIdGetRequest {
    id: string;
}

export interface DataMarinasSearchGetRequest {
    name?: string;
    coordinates?: string;
    distance?: number;
    limit?: number;
    offset?: number;
}

export interface DataMarinasTypeTypeGetRequest {
    type: string;
    coordinates?: string;
    distance?: number;
    limit?: number;
    offset?: number;
}

export interface DataMooringsGetRequest {
    coordinates?: string;
    distance?: number;
    limit?: number;
    offset?: number;
}

export interface DataMooringsIdGetRequest {
    id: string;
}

export interface DataMooringsSearchGetRequest {
    name?: string;
    coordinates?: string;
    distance?: number;
    limit?: number;
    offset?: number;
}

export interface DataMooringsTypeTypeGetRequest {
    type: string;
    coordinates?: string;
    distance?: number;
    limit?: number;
    offset?: number;
}

export interface DataServicesGetRequest {
    coordinates?: string;
    distance?: number;
    limit?: number;
    offset?: number;
}

export interface DataServicesIdGetRequest {
    id: string;
}

export interface DataServicesSearchGetRequest {
    name?: string;
    coordinates?: string;
    distance?: number;
    limit?: number;
    offset?: number;
}

export interface DataServicesTypeTypeGetRequest {
    type: string;
    coordinates?: string;
    distance?: number;
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DataApi extends runtime.BaseAPI {

    /**
     */
    async dataGeoJsonIdGetRaw(requestParameters: DataGeoJsonIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['geoJsonId'] == null) {
            throw new runtime.RequiredError(
                'geoJsonId',
                'Required parameter "geoJsonId" was null or undefined when calling dataGeoJsonIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Data/{geoJsonId}`.replace(`{${"geoJsonId"}}`, encodeURIComponent(String(requestParameters['geoJsonId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async dataGeoJsonIdGet(requestParameters: DataGeoJsonIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dataGeoJsonIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async dataMarinasGetRaw(requestParameters: DataMarinasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MarinaModel>>> {
        const queryParameters: any = {};

        if (requestParameters['coordinates'] != null) {
            queryParameters['coordinates'] = requestParameters['coordinates'];
        }

        if (requestParameters['distance'] != null) {
            queryParameters['distance'] = requestParameters['distance'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Data/marinas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MarinaModelFromJSON));
    }

    /**
     */
    async dataMarinasGet(requestParameters: DataMarinasGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MarinaModel>> {
        const response = await this.dataMarinasGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async dataMarinasIdGetRaw(requestParameters: DataMarinasIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarinaModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling dataMarinasIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Data/marinas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarinaModelFromJSON(jsonValue));
    }

    /**
     */
    async dataMarinasIdGet(requestParameters: DataMarinasIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarinaModel> {
        const response = await this.dataMarinasIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async dataMarinasSearchGetRaw(requestParameters: DataMarinasSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MarinaModel>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['coordinates'] != null) {
            queryParameters['coordinates'] = requestParameters['coordinates'];
        }

        if (requestParameters['distance'] != null) {
            queryParameters['distance'] = requestParameters['distance'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Data/marinas/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MarinaModelFromJSON));
    }

    /**
     */
    async dataMarinasSearchGet(requestParameters: DataMarinasSearchGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MarinaModel>> {
        const response = await this.dataMarinasSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async dataMarinasTypeTypeGetRaw(requestParameters: DataMarinasTypeTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MarinaModel>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling dataMarinasTypeTypeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['coordinates'] != null) {
            queryParameters['coordinates'] = requestParameters['coordinates'];
        }

        if (requestParameters['distance'] != null) {
            queryParameters['distance'] = requestParameters['distance'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Data/marinas/type/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MarinaModelFromJSON));
    }

    /**
     */
    async dataMarinasTypeTypeGet(requestParameters: DataMarinasTypeTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MarinaModel>> {
        const response = await this.dataMarinasTypeTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async dataMooringsGetRaw(requestParameters: DataMooringsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MooringModel>>> {
        const queryParameters: any = {};

        if (requestParameters['coordinates'] != null) {
            queryParameters['coordinates'] = requestParameters['coordinates'];
        }

        if (requestParameters['distance'] != null) {
            queryParameters['distance'] = requestParameters['distance'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Data/moorings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MooringModelFromJSON));
    }

    /**
     */
    async dataMooringsGet(requestParameters: DataMooringsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MooringModel>> {
        const response = await this.dataMooringsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async dataMooringsIdGetRaw(requestParameters: DataMooringsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MooringModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling dataMooringsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Data/moorings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MooringModelFromJSON(jsonValue));
    }

    /**
     */
    async dataMooringsIdGet(requestParameters: DataMooringsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MooringModel> {
        const response = await this.dataMooringsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async dataMooringsSearchGetRaw(requestParameters: DataMooringsSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MooringModel>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['coordinates'] != null) {
            queryParameters['coordinates'] = requestParameters['coordinates'];
        }

        if (requestParameters['distance'] != null) {
            queryParameters['distance'] = requestParameters['distance'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Data/moorings/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MooringModelFromJSON));
    }

    /**
     */
    async dataMooringsSearchGet(requestParameters: DataMooringsSearchGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MooringModel>> {
        const response = await this.dataMooringsSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async dataMooringsTypeTypeGetRaw(requestParameters: DataMooringsTypeTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MooringModel>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling dataMooringsTypeTypeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['coordinates'] != null) {
            queryParameters['coordinates'] = requestParameters['coordinates'];
        }

        if (requestParameters['distance'] != null) {
            queryParameters['distance'] = requestParameters['distance'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Data/moorings/type/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MooringModelFromJSON));
    }

    /**
     */
    async dataMooringsTypeTypeGet(requestParameters: DataMooringsTypeTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MooringModel>> {
        const response = await this.dataMooringsTypeTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async dataServicesGetRaw(requestParameters: DataServicesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceModel>>> {
        const queryParameters: any = {};

        if (requestParameters['coordinates'] != null) {
            queryParameters['coordinates'] = requestParameters['coordinates'];
        }

        if (requestParameters['distance'] != null) {
            queryParameters['distance'] = requestParameters['distance'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Data/services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceModelFromJSON));
    }

    /**
     */
    async dataServicesGet(requestParameters: DataServicesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceModel>> {
        const response = await this.dataServicesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async dataServicesIdGetRaw(requestParameters: DataServicesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling dataServicesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Data/services/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceModelFromJSON(jsonValue));
    }

    /**
     */
    async dataServicesIdGet(requestParameters: DataServicesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceModel> {
        const response = await this.dataServicesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async dataServicesSearchGetRaw(requestParameters: DataServicesSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceModel>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['coordinates'] != null) {
            queryParameters['coordinates'] = requestParameters['coordinates'];
        }

        if (requestParameters['distance'] != null) {
            queryParameters['distance'] = requestParameters['distance'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Data/services/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceModelFromJSON));
    }

    /**
     */
    async dataServicesSearchGet(requestParameters: DataServicesSearchGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceModel>> {
        const response = await this.dataServicesSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async dataServicesTypeTypeGetRaw(requestParameters: DataServicesTypeTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceModel>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling dataServicesTypeTypeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['coordinates'] != null) {
            queryParameters['coordinates'] = requestParameters['coordinates'];
        }

        if (requestParameters['distance'] != null) {
            queryParameters['distance'] = requestParameters['distance'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Data/services/type/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceModelFromJSON));
    }

    /**
     */
    async dataServicesTypeTypeGet(requestParameters: DataServicesTypeTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceModel>> {
        const response = await this.dataServicesTypeTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
