{
  "version": 3,
  "sources": ["../../@mapbox/mapbox-sdk/services/service-helpers/validator.js", "../../@mapbox/mapbox-sdk/services/service-helpers/pick.js", "../../@mapbox/mapbox-sdk/lib/helpers/url-utils.js", "../../@mapbox/mapbox-sdk/lib/constants.js", "../../@mapbox/mapbox-sdk/lib/classes/mapi-request.js", "../../@mapbox/mapbox-sdk/lib/classes/mapi-client.js", "../../@mapbox/mapbox-sdk/lib/helpers/parse-link-header.js", "../../@mapbox/mapbox-sdk/lib/classes/mapi-response.js", "../../@mapbox/mapbox-sdk/lib/classes/mapi-error.js", "../../@mapbox/mapbox-sdk/lib/helpers/parse-headers.js", "../../@mapbox/mapbox-sdk/lib/browser/browser-layer.js", "../../@mapbox/mapbox-sdk/lib/browser/browser-client.js", "../../@mapbox/mapbox-sdk/services/service-helpers/create-service-factory.js", "../../@mapbox/mapbox-sdk/services/datasets.js"],
  "sourcesContent": ["'use strict';\n\nvar xtend = require('xtend');\nvar v = require('@mapbox/fusspot');\n\nfunction file(value) {\n  // If we're in a browser so Blob is available, the file must be that.\n  // In Node, however, it could be a filepath or a pipeable (Readable) stream.\n  if (typeof window !== 'undefined') {\n    if (value instanceof global.Blob || value instanceof global.ArrayBuffer) {\n      return;\n    }\n    return 'Blob or ArrayBuffer';\n  }\n  if (typeof value === 'string' || value.pipe !== undefined) {\n    return;\n  }\n  return 'Filename or Readable stream';\n}\n\nfunction assertShape(validatorObj, apiName) {\n  return v.assert(v.strictShape(validatorObj), apiName);\n}\n\nfunction date(value) {\n  var msg = 'date';\n  if (typeof value === 'boolean') {\n    return msg;\n  }\n  try {\n    var date = new Date(value);\n    if (date.getTime && isNaN(date.getTime())) {\n      return msg;\n    }\n  } catch (e) {\n    return msg;\n  }\n}\n\nfunction coordinates(value) {\n  return v.tuple(v.number, v.number)(value);\n}\n\nmodule.exports = xtend(v, {\n  file: file,\n  date: date,\n  coordinates: coordinates,\n  assertShape: assertShape\n});\n", "'use strict';\n\n/**\n * Create a new object by picking properties off an existing object.\n * The second param can be overloaded as a callback for\n * more fine grained picking of properties.\n * @param {Object} source\n * @param {Array<string>|function(string, Object):boolean} keys\n * @returns {Object}\n */\nfunction pick(source, keys) {\n  var filter = function(key, val) {\n    return keys.indexOf(key) !== -1 && val !== undefined;\n  };\n\n  if (typeof keys === 'function') {\n    filter = keys;\n  }\n\n  return Object.keys(source)\n    .filter(function(key) {\n      return filter(key, source[key]);\n    })\n    .reduce(function(result, key) {\n      result[key] = source[key];\n      return result;\n    }, {});\n}\n\nmodule.exports = pick;\n", "'use strict';\n\n// Encode each item of an array individually. The comma\n// delimiters should not themselves be encoded.\nfunction encodeArray(arrayValue) {\n  return arrayValue.map(encodeURIComponent).join(',');\n}\n\nfunction encodeValue(value) {\n  if (Array.isArray(value)) {\n    return encodeArray(value);\n  }\n  return encodeURIComponent(String(value));\n}\n\n/**\n * Append a query parameter to a URL.\n *\n * @param {string} url\n * @param {string} key\n * @param {string|number|boolean|Array<*>>} [value] - Provide an array\n *   if the value is a list and commas between values need to be\n *   preserved, unencoded.\n * @returns {string} - Modified URL.\n */\nfunction appendQueryParam(url, key, value) {\n  if (value === false || value === null) {\n    return url;\n  }\n  var punctuation = /\\?/.test(url) ? '&' : '?';\n  var query = encodeURIComponent(key);\n  if (value !== undefined && value !== '' && value !== true) {\n    query += '=' + encodeValue(value);\n  }\n  return '' + url + punctuation + query;\n}\n\n/**\n * Derive a query string from an object and append it\n * to a URL.\n *\n * @param {string} url\n * @param {Object} [queryObject] - Values should be primitives.\n * @returns {string} - Modified URL.\n */\nfunction appendQueryObject(url, queryObject) {\n  if (!queryObject) {\n    return url;\n  }\n\n  var result = url;\n  Object.keys(queryObject).forEach(function(key) {\n    var value = queryObject[key];\n    if (value === undefined) {\n      return;\n    }\n    if (Array.isArray(value)) {\n      value = value\n        .filter(function(v) {\n          return v !== null && v !== undefined;\n        })\n        .join(',');\n    }\n    result = appendQueryParam(result, key, value);\n  });\n  return result;\n}\n\n/**\n * Prepend an origin to a URL. If the URL already has an\n * origin, do nothing.\n *\n * @param {string} url\n * @param {string} origin\n * @returns {string} - Modified URL.\n */\nfunction prependOrigin(url, origin) {\n  if (!origin) {\n    return url;\n  }\n\n  if (url.slice(0, 4) === 'http') {\n    return url;\n  }\n\n  var delimiter = url[0] === '/' ? '' : '/';\n  return '' + origin.replace(/\\/$/, '') + delimiter + url;\n}\n\n/**\n * Interpolate values into a route with express-style,\n * colon-prefixed route parameters.\n *\n * @param {string} route\n * @param {Object} [params] - Values should be primitives\n *   or arrays of primitives. Provide an array if the value\n *   is a list and commas between values need to be\n *   preserved, unencoded.\n * @returns {string} - Modified URL.\n */\nfunction interpolateRouteParams(route, params) {\n  if (!params) {\n    return route;\n  }\n  return route.replace(/\\/:([a-zA-Z0-9]+)/g, function(_, paramId) {\n    var value = params[paramId];\n    if (value === undefined) {\n      throw new Error('Unspecified route parameter ' + paramId);\n    }\n    var preppedValue = encodeValue(value);\n    return '/' + preppedValue;\n  });\n}\n\nmodule.exports = {\n  appendQueryObject: appendQueryObject,\n  appendQueryParam: appendQueryParam,\n  prependOrigin: prependOrigin,\n  interpolateRouteParams: interpolateRouteParams\n};\n", "'use strict';\n\nmodule.exports = {\n  API_ORIGIN: 'https://api.mapbox.com',\n  EVENT_PROGRESS_DOWNLOAD: 'downloadProgress',\n  EVENT_PROGRESS_UPLOAD: 'uploadProgress',\n  EVENT_ERROR: 'error',\n  EVENT_RESPONSE: 'response',\n  ERROR_HTTP: 'HttpError',\n  ERROR_REQUEST_ABORTED: 'RequestAbortedError'\n};\n", "'use strict';\n\nvar parseToken = require('@mapbox/parse-mapbox-token');\nvar xtend = require('xtend');\nvar EventEmitter = require('eventemitter3');\nvar urlUtils = require('../helpers/url-utils');\nvar constants = require('../constants');\n\nvar requestId = 1;\n\n/**\n * A Mapbox API request.\n *\n * Note that creating a `MapiRequest` does *not* send the request automatically.\n * Use the request's `send` method to send it off and get a `Promise`.\n *\n * The `emitter` property is an `EventEmitter` that emits the following events:\n *\n * - `'response'` - Listeners will be called with a `MapiResponse`.\n * - `'error'` - Listeners will be called with a `MapiError`.\n * - `'downloadProgress'` - Listeners will be called with `ProgressEvents`.\n * - `'uploadProgress'` - Listeners will be called with `ProgressEvents`.\n *   Upload events are only available when the request includes a file.\n *\n * @class MapiRequest\n * @property {EventEmitter} emitter - An event emitter. See above.\n * @property {MapiClient} client - This request's `MapiClient`.\n * @property {MapiResponse|null} response - If this request has been sent and received\n *   a response, the response is available on this property.\n * @property {MapiError|Error|null} error - If this request has been sent and\n *   received an error in response, the error is available on this property.\n * @property {boolean} aborted - If the request has been aborted\n *   (via [`abort`](#abort)), this property will be `true`.\n * @property {boolean} sent - If the request has been sent, this property will\n *   be `true`. You cannot send the same request twice, so if you need to create\n *   a new request that is the equivalent of an existing one, use\n *   [`clone`](#clone).\n * @property {string} path - The request's path, including colon-prefixed route\n *   parameters.\n * @property {string} origin - The request's origin.\n * @property {string} method - The request's HTTP method.\n * @property {Object} query - A query object, which will be transformed into\n *   a URL query string.\n * @property {Object} params - A route parameters object, whose values will\n *   be interpolated the path.\n * @property {Object} headers - The request's headers.\n * @property {Object|string|null} body - Data to send with the request.\n *   If the request has a body, it will also be sent with the header\n *   `'Content-Type: application/json'`.\n * @property {Blob|ArrayBuffer|string|ReadStream} file - A file to\n *   send with the request. The browser client accepts Blobs and ArrayBuffers;\n *   the Node client accepts strings (filepaths) and ReadStreams.\n * @property {string} encoding - The encoding of the response.\n * @property {string} sendFileAs - The method to send the `file`. Options are\n *   `data` (x-www-form-urlencoded) or `form` (multipart/form-data).\n */\n\n/**\n * @ignore\n * @param {MapiClient} client\n * @param {Object} options\n * @param {string} options.method\n * @param {string} options.path\n * @param {Object} [options.query={}]\n * @param {Object} [options.params={}]\n * @param {string} [options.origin]\n * @param {Object} [options.headers]\n * @param {Object} [options.body=null]\n * @param {Blob|ArrayBuffer|string|ReadStream} [options.file=null]\n * @param {string} [options.encoding=utf8]\n */\nfunction MapiRequest(client, options) {\n  if (!client) {\n    throw new Error('MapiRequest requires a client');\n  }\n  if (!options || !options.path || !options.method) {\n    throw new Error(\n      'MapiRequest requires an options object with path and method properties'\n    );\n  }\n\n  var defaultHeaders = {};\n  if (options.body) {\n    defaultHeaders['content-type'] = 'application/json';\n  }\n\n  var headersWithDefaults = xtend(defaultHeaders, options.headers);\n\n  // Disallows duplicate header names of mixed case,\n  // e.g. Content-Type and content-type.\n  var headers = Object.keys(headersWithDefaults).reduce(function(memo, name) {\n    memo[name.toLowerCase()] = headersWithDefaults[name];\n    return memo;\n  }, {});\n\n  this.id = requestId++;\n  this._options = options;\n\n  this.emitter = new EventEmitter();\n  this.client = client;\n  this.response = null;\n  this.error = null;\n  this.sent = false;\n  this.aborted = false;\n  this.path = options.path;\n  this.method = options.method;\n  this.origin = options.origin || client.origin;\n  this.query = options.query || {};\n  this.params = options.params || {};\n  this.body = options.body || null;\n  this.file = options.file || null;\n  this.encoding = options.encoding || 'utf8';\n  this.sendFileAs = options.sendFileAs || null;\n  this.headers = headers;\n}\n\n/**\n * Get the URL of the request.\n *\n * @param {string} [accessToken] - By default, the access token of the request's\n *   client is used.\n * @return {string}\n */\nMapiRequest.prototype.url = function url(accessToken) {\n  var url = urlUtils.prependOrigin(this.path, this.origin);\n  url = urlUtils.appendQueryObject(url, this.query);\n  var routeParams = this.params;\n  var actualAccessToken =\n    accessToken == null ? this.client.accessToken : accessToken;\n  if (actualAccessToken) {\n    url = urlUtils.appendQueryParam(url, 'access_token', actualAccessToken);\n    var accessTokenOwnerId = parseToken(actualAccessToken).user;\n    routeParams = xtend({ ownerId: accessTokenOwnerId }, routeParams);\n  }\n  url = urlUtils.interpolateRouteParams(url, routeParams);\n  return url;\n};\n\n/**\n * Send the request. Returns a Promise that resolves with a `MapiResponse`.\n * You probably want to use `response.body`.\n *\n * `send` only retrieves the first page of paginated results. You can get\n * the next page by using the `MapiResponse`'s [`nextPage`](#nextpage)\n * function, or iterate through all pages using [`eachPage`](#eachpage)\n * instead of `send`.\n *\n * @returns {Promise<MapiResponse>}\n */\nMapiRequest.prototype.send = function send() {\n  var self = this;\n\n  if (self.sent) {\n    throw new Error(\n      'This request has already been sent. Check the response and error properties. Create a new request with clone().'\n    );\n  }\n  self.sent = true;\n\n  return self.client.sendRequest(self).then(\n    function(response) {\n      self.response = response;\n      self.emitter.emit(constants.EVENT_RESPONSE, response);\n      return response;\n    },\n    function(error) {\n      self.error = error;\n      self.emitter.emit(constants.EVENT_ERROR, error);\n      throw error;\n    }\n  );\n};\n\n/**\n * Abort the request.\n *\n * Any pending `Promise` returned by [`send`](#send) will be rejected with\n * an error with `type: 'RequestAbortedError'`. If you've created a request\n * that might be aborted, you need to catch and handle such errors.\n *\n * This method will also abort any requests created while fetching subsequent\n * pages via [`eachPage`](#eachpage).\n *\n * If the request has not been sent or has already been aborted, nothing\n * will happen.\n */\nMapiRequest.prototype.abort = function abort() {\n  if (this._nextPageRequest) {\n    this._nextPageRequest.abort();\n    delete this._nextPageRequest;\n  }\n\n  if (this.response || this.error || this.aborted) return;\n\n  this.aborted = true;\n  this.client.abortRequest(this);\n};\n\n/**\n * Invoke a callback for each page of a paginated API response.\n *\n * The callback should have the following signature:\n *\n * ```js\n * (\n *   error: MapiError,\n *   response: MapiResponse,\n *   next: () => void\n * ) => void\n * ```\n *\n * **The next page will not be fetched until you've invoked the\n * `next` callback**, indicating that you're ready for it.\n *\n * @param {Function} callback\n */\nMapiRequest.prototype.eachPage = function eachPage(callback) {\n  var self = this;\n\n  function handleResponse(response) {\n    function getNextPage() {\n      delete self._nextPageRequest;\n      var nextPageRequest = response.nextPage();\n      if (nextPageRequest) {\n        self._nextPageRequest = nextPageRequest;\n        getPage(nextPageRequest);\n      }\n    }\n    callback(null, response, getNextPage);\n  }\n\n  function handleError(error) {\n    callback(error, null, function() {});\n  }\n\n  function getPage(request) {\n    request.send().then(handleResponse, handleError);\n  }\n  getPage(this);\n};\n\n/**\n * Clone this request.\n *\n * Each request can only be sent *once*. So if you'd like to send the\n * same request again, clone it and send away.\n *\n * @returns {MapiRequest} - A new `MapiRequest` configured just like this one.\n */\nMapiRequest.prototype.clone = function clone() {\n  return this._extend();\n};\n\n/**\n * @ignore\n */\nMapiRequest.prototype._extend = function _extend(options) {\n  var extendedOptions = xtend(this._options, options);\n  return new MapiRequest(this.client, extendedOptions);\n};\n\nmodule.exports = MapiRequest;\n", "'use strict';\n\nvar parseToken = require('@mapbox/parse-mapbox-token');\nvar MapiRequest = require('./mapi-request');\nvar constants = require('../constants');\n\n/**\n * A low-level Mapbox API client. Use it to create service clients\n * that share the same configuration.\n *\n * Services and `MapiRequest`s use the underlying `MapiClient` to\n * determine how to create, send, and abort requests in a way\n * that is appropriate to the configuration and environment\n * (Node or the browser).\n *\n * @class MapiClient\n * @property {string} accessToken - The Mapbox access token assigned\n *   to this client.\n * @property {string} [origin] - The origin\n *   to use for API requests. Defaults to https://api.mapbox.com.\n */\n\nfunction MapiClient(options) {\n  if (!options || !options.accessToken) {\n    throw new Error('Cannot create a client without an access token');\n  }\n  // Try parsing the access token to determine right away if it's valid.\n  parseToken(options.accessToken);\n\n  this.accessToken = options.accessToken;\n  this.origin = options.origin || constants.API_ORIGIN;\n}\n\nMapiClient.prototype.createRequest = function createRequest(requestOptions) {\n  return new MapiRequest(this, requestOptions);\n};\n\nmodule.exports = MapiClient;\n", "'use strict';\n\n// Like https://github.com/thlorenz/lib/parse-link-header but without any\n// additional dependencies.\n\nfunction parseParam(param) {\n  var parts = param.match(/\\s*(.+)\\s*=\\s*\"?([^\"]+)\"?/);\n  if (!parts) return null;\n\n  return {\n    key: parts[1],\n    value: parts[2]\n  };\n}\n\nfunction parseLink(link) {\n  var parts = link.match(/<?([^>]*)>(.*)/);\n  if (!parts) return null;\n\n  var linkUrl = parts[1];\n  var linkParams = parts[2].split(';');\n  var rel = null;\n  var parsedLinkParams = linkParams.reduce(function(result, param) {\n    var parsed = parseParam(param);\n    if (!parsed) return result;\n    if (parsed.key === 'rel') {\n      if (!rel) {\n        rel = parsed.value;\n      }\n      return result;\n    }\n    result[parsed.key] = parsed.value;\n    return result;\n  }, {});\n  if (!rel) return null;\n\n  return {\n    url: linkUrl,\n    rel: rel,\n    params: parsedLinkParams\n  };\n}\n\n/**\n * Parse a Link header.\n *\n * @param {string} linkHeader\n * @returns {{\n *   [string]: {\n *     url: string,\n *     params: { [string]: string }\n *   }\n * }}\n */\nfunction parseLinkHeader(linkHeader) {\n  if (!linkHeader) return {};\n\n  return linkHeader.split(/,\\s*</).reduce(function(result, link) {\n    var parsed = parseLink(link);\n    if (!parsed) return result;\n    // rel value can be multiple whitespace-separated rels.\n    var splitRel = parsed.rel.split(/\\s+/);\n    splitRel.forEach(function(rel) {\n      if (!result[rel]) {\n        result[rel] = {\n          url: parsed.url,\n          params: parsed.params\n        };\n      }\n    });\n    return result;\n  }, {});\n}\n\nmodule.exports = parseLinkHeader;\n", "'use strict';\n\nvar parseLinkHeader = require('../helpers/parse-link-header');\n\n/**\n * A Mapbox API response.\n *\n * @class MapiResponse\n * @property {Object} body - The response body, parsed as JSON.\n * @property {string} rawBody - The raw response body.\n * @property {number} statusCode - The response's status code.\n * @property {Object} headers - The parsed response headers.\n * @property {Object} links - The parsed response links.\n * @property {MapiRequest} request - The response's originating `MapiRequest`.\n */\n\n/**\n * @ignore\n * @param {MapiRequest} request\n * @param {Object} responseData\n * @param {Object} responseData.headers\n * @param {string} responseData.body\n * @param {number} responseData.statusCode\n */\nfunction MapiResponse(request, responseData) {\n  this.request = request;\n  this.headers = responseData.headers;\n  this.rawBody = responseData.body;\n  this.statusCode = responseData.statusCode;\n  try {\n    this.body = JSON.parse(responseData.body || '{}');\n  } catch (parseError) {\n    this.body = responseData.body;\n  }\n  this.links = parseLinkHeader(this.headers.link);\n}\n\n/**\n * Check if there is a next page that you can fetch.\n *\n * @returns {boolean}\n */\nMapiResponse.prototype.hasNextPage = function hasNextPage() {\n  return !!this.links.next;\n};\n\n/**\n * Create a request for the next page, if there is one.\n * If there is no next page, returns `null`.\n *\n * @returns {MapiRequest | null}\n */\nMapiResponse.prototype.nextPage = function nextPage() {\n  if (!this.hasNextPage()) return null;\n  return this.request._extend({\n    path: this.links.next.url\n  });\n};\n\nmodule.exports = MapiResponse;\n", "'use strict';\n\nvar constants = require('../constants');\n\n/**\n * A Mapbox API error.\n *\n * If there's an error during the API transaction,\n * the Promise returned by `MapiRequest`'s [`send`](#send)\n * method should reject with a `MapiError`.\n *\n * @class MapiError\n * @hideconstructor\n * @property {MapiRequest} request - The errored request.\n * @property {string} type - The type of error. Usually this is `'HttpError'`.\n *   If the request was aborted, so the error was\n *   not sent from the server, the type will be\n *   `'RequestAbortedError'`.\n * @property {number} [statusCode] - The numeric status code of\n *   the HTTP response.\n * @property {Object | string} [body] - If the server sent a response body,\n *   this property exposes that response, parsed as JSON if possible.\n * @property {string} [message] - Whatever message could be derived from the\n *   call site and HTTP response.\n *\n * @param {MapiRequest} options.request\n * @param {number} [options.statusCode]\n * @param {string} [options.body]\n * @param {string} [options.message]\n * @param {string} [options.type]\n */\nfunction MapiError(options) {\n  var errorType = options.type || constants.ERROR_HTTP;\n\n  var body;\n  if (options.body) {\n    try {\n      body = JSON.parse(options.body);\n    } catch (e) {\n      body = options.body;\n    }\n  } else {\n    body = null;\n  }\n\n  var message = options.message || null;\n  if (!message) {\n    if (typeof body === 'string') {\n      message = body;\n    } else if (body && typeof body.message === 'string') {\n      message = body.message;\n    } else if (errorType === constants.ERROR_REQUEST_ABORTED) {\n      message = 'Request aborted';\n    }\n  }\n\n  this.message = message;\n  this.type = errorType;\n  this.statusCode = options.statusCode || null;\n  this.request = options.request;\n  this.body = body;\n}\n\nmodule.exports = MapiError;\n", "'use strict';\n\nfunction parseSingleHeader(raw) {\n  var boundary = raw.indexOf(':');\n  var name = raw\n    .substring(0, boundary)\n    .trim()\n    .toLowerCase();\n  var value = raw.substring(boundary + 1).trim();\n  return {\n    name: name,\n    value: value\n  };\n}\n\n/**\n * Parse raw headers into an object with lowercase properties.\n * Does not fully parse headings into more complete data structure,\n * as larger libraries might do. Also does not deal with duplicate\n * headers because Node doesn't seem to deal with those well, so\n * we shouldn't let the browser either, for consistency.\n *\n * @param {string} raw\n * @returns {Object}\n */\nfunction parseHeaders(raw) {\n  var headers = {};\n  if (!raw) {\n    return headers;\n  }\n\n  raw\n    .trim()\n    .split(/[\\r|\\n]+/)\n    .forEach(function(rawHeader) {\n      var parsed = parseSingleHeader(rawHeader);\n      headers[parsed.name] = parsed.value;\n    });\n\n  return headers;\n}\n\nmodule.exports = parseHeaders;\n", "'use strict';\n\nvar MapiResponse = require('../classes/mapi-response');\nvar MapiError = require('../classes/mapi-error');\nvar constants = require('../constants');\nvar parseHeaders = require('../helpers/parse-headers');\n\n// Keys are request IDs, values are XHRs.\nvar requestsUnderway = {};\n\nfunction browserAbort(request) {\n  var xhr = requestsUnderway[request.id];\n  if (!xhr) return;\n  xhr.abort();\n  delete requestsUnderway[request.id];\n}\n\nfunction createResponse(request, xhr) {\n  return new MapiResponse(request, {\n    body: xhr.response,\n    headers: parseHeaders(xhr.getAllResponseHeaders()),\n    statusCode: xhr.status\n  });\n}\n\nfunction normalizeBrowserProgressEvent(event) {\n  var total = event.total;\n  var transferred = event.loaded;\n  var percent = (100 * transferred) / total;\n  return {\n    total: total,\n    transferred: transferred,\n    percent: percent\n  };\n}\n\nfunction sendRequestXhr(request, xhr) {\n  return new Promise(function(resolve, reject) {\n    xhr.onprogress = function(event) {\n      request.emitter.emit(\n        constants.EVENT_PROGRESS_DOWNLOAD,\n        normalizeBrowserProgressEvent(event)\n      );\n    };\n\n    var file = request.file;\n    if (file) {\n      xhr.upload.onprogress = function(event) {\n        request.emitter.emit(\n          constants.EVENT_PROGRESS_UPLOAD,\n          normalizeBrowserProgressEvent(event)\n        );\n      };\n    }\n\n    xhr.onerror = function(error) {\n      reject(error);\n    };\n\n    xhr.onabort = function() {\n      var mapiError = new MapiError({\n        request: request,\n        type: constants.ERROR_REQUEST_ABORTED\n      });\n      reject(mapiError);\n    };\n\n    xhr.onload = function() {\n      delete requestsUnderway[request.id];\n      if (xhr.status < 200 || xhr.status >= 400) {\n        var mapiError = new MapiError({\n          request: request,\n          body: xhr.response,\n          statusCode: xhr.status\n        });\n        reject(mapiError);\n        return;\n      }\n      resolve(xhr);\n    };\n\n    var body = request.body;\n\n    // matching service needs to send a www-form-urlencoded request\n    if (typeof body === 'string') {\n      xhr.send(body);\n    } else if (body) {\n      xhr.send(JSON.stringify(body));\n    } else if (file) {\n      xhr.send(file);\n    } else {\n      xhr.send();\n    }\n\n    requestsUnderway[request.id] = xhr;\n  }).then(function(xhr) {\n    return createResponse(request, xhr);\n  });\n}\n\n// The accessToken argument gives this function flexibility\n// for Mapbox's internal client.\nfunction createRequestXhr(request, accessToken) {\n  var url = request.url(accessToken);\n  var xhr = new window.XMLHttpRequest();\n  xhr.open(request.method, url);\n  Object.keys(request.headers).forEach(function(key) {\n    xhr.setRequestHeader(key, request.headers[key]);\n  });\n  return xhr;\n}\n\nfunction browserSend(request) {\n  return Promise.resolve().then(function() {\n    var xhr = createRequestXhr(request, request.client.accessToken);\n    return sendRequestXhr(request, xhr);\n  });\n}\n\nmodule.exports = {\n  browserAbort: browserAbort,\n  sendRequestXhr: sendRequestXhr,\n  browserSend: browserSend,\n  createRequestXhr: createRequestXhr\n};\n", "'use strict';\n\nvar browser = require('./browser-layer');\nvar MapiClient = require('../classes/mapi-client');\n\nfunction BrowserClient(options) {\n  MapiClient.call(this, options);\n}\nBrowserClient.prototype = Object.create(MapiClient.prototype);\nBrowserClient.prototype.constructor = BrowserClient;\n\nBrowserClient.prototype.sendRequest = browser.browserSend;\nBrowserClient.prototype.abortRequest = browser.browserAbort;\n\n/**\n * Create a client for the browser.\n *\n * @param {Object} options\n * @param {string} options.accessToken\n * @param {string} [options.origin]\n * @returns {MapiClient}\n */\nfunction createBrowserClient(options) {\n  return new BrowserClient(options);\n}\n\nmodule.exports = createBrowserClient;\n", "'use strict';\n\nvar MapiClient = require('../../lib/classes/mapi-client');\n// This will create the environment-appropriate client.\nvar createClient = require('../../lib/client');\n\nfunction createServiceFactory(ServicePrototype) {\n  return function(clientOrConfig) {\n    var client;\n    if (MapiClient.prototype.isPrototypeOf(clientOrConfig)) {\n      client = clientOrConfig;\n    } else {\n      client = createClient(clientOrConfig);\n    }\n    var service = Object.create(ServicePrototype);\n    service.client = client;\n    return service;\n  };\n}\n\nmodule.exports = createServiceFactory;\n", "'use strict';\n\nvar v = require('./service-helpers/validator');\nvar pick = require('./service-helpers/pick');\nvar createServiceFactory = require('./service-helpers/create-service-factory');\n\n/**\n * Datasets API service.\n *\n * Learn more about this service and its responses in\n * [the HTTP service documentation](https://docs.mapbox.com/api/maps/#datasets).\n */\nvar Datasets = {};\n\n/**\n * List datasets in your account.\n *\n * See the [corresponding HTTP service documentation](https://docs.mapbox.com/api/maps/#list-datasets).\n *\n * @param {Object} [config]\n * @param {string} [config.sortby=created] - Sort by either `modified` or `created` (default) dates.\n * @return {MapiRequest}\n *\n * @example\n * datasetsClient.listDatasets()\n *   .send()\n *   .then(response => {\n *     const datasets = response.body;\n *   });\n *\n * @example\n * datasetsClient.listDatasets()\n *   .eachPage((error, response, next) => {\n *     // Handle error or response and call next.\n *   });\n */\nDatasets.listDatasets = function(config) {\n  v.assertShape({\n    sortby: v.oneOf('created', 'modified')\n  })(config);\n\n  return this.client.createRequest({\n    method: 'GET',\n    path: '/datasets/v1/:ownerId',\n    query: config ? pick(config, ['sortby']) : {}\n  });\n};\n\n/**\n * Create a new, empty dataset.\n *\n * See the [corresponding HTTP service documentation](https://docs.mapbox.com/api/maps/#create-a-dataset).\n *\n * @param {Object} config\n * @param {string} [config.name]\n * @param {string} [config.description]\n * @return {MapiRequest}\n *\n * @example\n * datasetsClient.createDataset({\n *   name: 'example',\n *   description: 'An example dataset'\n * })\n *   .send()\n *   .then(response => {\n *     const datasetMetadata = response.body;\n *   });\n */\nDatasets.createDataset = function(config) {\n  v.assertShape({\n    name: v.string,\n    description: v.string\n  })(config);\n\n  return this.client.createRequest({\n    method: 'POST',\n    path: '/datasets/v1/:ownerId',\n    body: config\n  });\n};\n\n/**\n * Get metadata about a dataset.\n *\n * See the [corresponding HTTP service documentation](https://docs.mapbox.com/api/maps/#retrieve-a-dataset).\n *\n * @param {Object} config\n * @param {string} config.datasetId\n * @return {MapiRequest}\n *\n * @example\n * datasetsClient.getMetadata({\n *   datasetId: 'dataset-id'\n * })\n *   .send()\n *   .then(response => {\n *     const datasetMetadata = response.body;\n *   })\n */\nDatasets.getMetadata = function(config) {\n  v.assertShape({\n    datasetId: v.required(v.string),\n    description: v.string\n  })(config);\n\n  return this.client.createRequest({\n    method: 'GET',\n    path: '/datasets/v1/:ownerId/:datasetId',\n    params: config\n  });\n};\n\n/**\n * Update user-defined properties of a dataset's metadata.\n *\n * See the [corresponding HTTP service documentation](https://docs.mapbox.com/api/maps/#update-a-dataset).\n *\n * @param {Object} config\n * @param {string} config.datasetId\n * @param {string} [config.name]\n * @param {string} [config.description]\n * @return {MapiRequest}\n *\n * @example\n * datasetsClient.updateMetadata({\n *   datasetId: 'dataset-id',\n *   name: 'foo'\n * })\n *   .send()\n *   .then(response => {\n *     const datasetMetadata = response.body;\n *   });\n */\nDatasets.updateMetadata = function(config) {\n  v.assertShape({\n    datasetId: v.required(v.string),\n    name: v.string,\n    description: v.string\n  })(config);\n\n  return this.client.createRequest({\n    method: 'PATCH',\n    path: '/datasets/v1/:ownerId/:datasetId',\n    params: pick(config, ['datasetId']),\n    body: pick(config, ['name', 'description'])\n  });\n};\n\n/**\n * Delete a dataset, including all features it contains.\n *\n * See the [corresponding HTTP service documentation](https://docs.mapbox.com/api/maps/#delete-a-dataset).\n *\n * @param {Object} config\n * @param {string} config.datasetId\n * @return {MapiRequest}\n *\n * @example\n * datasetsClient.deleteDataset({\n *   datasetId: 'dataset-id'\n * })\n *   .send()\n *   .then(response => {\n *     // Dataset is successfully deleted.\n *   });\n */\nDatasets.deleteDataset = function(config) {\n  v.assertShape({\n    datasetId: v.required(v.string)\n  })(config);\n\n  return this.client.createRequest({\n    method: 'DELETE',\n    path: '/datasets/v1/:ownerId/:datasetId',\n    params: config\n  });\n};\n\n/**\n * List features in a dataset.\n *\n * This endpoint supports pagination. Use `MapiRequest#eachPage` or manually specify\n * the `limit` and `start` options.\n *\n * See the [corresponding HTTP service documentation](https://docs.mapbox.com/api/maps/#list-features).\n *\n * @param {Object} config\n * @param {string} config.datasetId\n * @param {number} [config.limit] - Only list this number of features.\n * @param {string} [config.start] - The ID of the feature from which the listing should\n *   start.\n * @return {MapiRequest}\n *\n * @example\n * datasetsClient.listFeatures({\n *   datasetId: 'dataset-id'\n * })\n *   .send()\n *   .then(response => {\n *     const features = response.body;\n *   });\n */\nDatasets.listFeatures = function(config) {\n  v.assertShape({\n    datasetId: v.required(v.string),\n    limit: v.number,\n    start: v.string\n  })(config);\n\n  return this.client.createRequest({\n    method: 'GET',\n    path: '/datasets/v1/:ownerId/:datasetId/features',\n    params: pick(config, ['datasetId']),\n    query: pick(config, ['limit', 'start'])\n  });\n};\n\n/**\n * Add a feature to a dataset or update an existing one.\n *\n * See the [corresponding HTTP service documentation](https://docs.mapbox.com/api/maps/#insert-or-update-a-feature).\n *\n * @param {Object} config\n * @param {string} config.datasetId\n * @param {string} config.featureId\n * @param {Object} config.feature - Valid GeoJSON that is not a `FeatureCollection`.\n *   If the feature has a top-level `id` property, it must match the `featureId` you specify.\n * @return {MapiRequest}\n *\n * @example\n * datasetsClient.putFeature({\n *   datasetId: 'dataset-id',\n *   featureId: 'null-island',\n *   feature: {\n *     \"type\": \"Feature\",\n *     \"properties\": { \"name\": \"Null Island\" },\n *     \"geometry\": {\n *       \"type\": \"Point\",\n *       \"coordinates\": [0, 0]\n *     }\n *   }\n * })\n *   .send()\n *   .then(response => {\n *     const feature = response.body;\n *   });\n */\nDatasets.putFeature = function(config) {\n  v.assertShape({\n    datasetId: v.required(v.string),\n    featureId: v.required(v.string),\n    feature: v.required(v.plainObject)\n  })(config);\n\n  if (\n    config.feature.id !== undefined &&\n    config.feature.id !== config.featureId\n  ) {\n    throw new Error('featureId must match the id property of the feature');\n  }\n\n  return this.client.createRequest({\n    method: 'PUT',\n    path: '/datasets/v1/:ownerId/:datasetId/features/:featureId',\n    params: pick(config, ['datasetId', 'featureId']),\n    body: config.feature\n  });\n};\n\n/**\n * Get a feature in a dataset.\n *\n * See the [corresponding HTTP service documentation](https://docs.mapbox.com/api/maps/#retrieve-a-feature).\n *\n * @param {Object} config\n * @param {string} config.datasetId\n * @param {string} config.featureId\n * @return {MapiRequest}\n *\n * @example\n * datasetsClient.getFeature({\n *   datasetId: 'dataset-id',\n *   featureId: 'feature-id'\n * })\n *   .send()\n *   .then(response => {\n *     const feature = response.body;\n *   });\n */\nDatasets.getFeature = function(config) {\n  v.assertShape({\n    datasetId: v.required(v.string),\n    featureId: v.required(v.string)\n  })(config);\n\n  return this.client.createRequest({\n    method: 'GET',\n    path: '/datasets/v1/:ownerId/:datasetId/features/:featureId',\n    params: config\n  });\n};\n\n/**\n * Delete a feature in a dataset.\n *\n * See the [corresponding HTTP service documentation](https://docs.mapbox.com/api/maps/#delete-a-feature).\n *\n * @param {Object} config\n * @param {string} config.datasetId\n * @param {string} config.featureId\n * @return {MapiRequest}\n *\n * @example\n * datasetsClient.deleteFeature({\n *   datasetId: 'dataset-id',\n *   featureId: 'feature-id'\n * })\n *   .send()\n *   .then(response => {\n *     // Feature is successfully deleted.\n *   });\n */\nDatasets.deleteFeature = function(config) {\n  v.assertShape({\n    datasetId: v.required(v.string),\n    featureId: v.required(v.string)\n  })(config);\n\n  return this.client.createRequest({\n    method: 'DELETE',\n    path: '/datasets/v1/:ownerId/:datasetId/features/:featureId',\n    params: config\n  });\n};\n\nmodule.exports = createServiceFactory(Datasets);\n"],
  "mappings": "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",
  "names": ["date", "url", "xhr"]
}
